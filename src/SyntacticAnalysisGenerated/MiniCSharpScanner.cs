//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/user/Escritorio/Compi/Proyecto/CompilatorProject\MiniCSharpScanner.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SyntacticAnalysisGenerated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
[System.CLSCompliant(false)]
public partial class MiniCSharpScanner : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, BLOCKCOMMENT=2, WS=3, CLASS=4, USING=5, VOID=6, IF=7, ELSE=8, 
		FOR=9, WHILE=10, BREAK=11, RETURN=12, READ=13, WRITE=14, NEW=15, LBRACE=16, 
		RBRACE=17, LPARENT=18, RPARENT=19, LBRACK=20, RBRACK=21, SEMICOLON=22, 
		COMMA=23, DOT=24, ASSIGN=25, INC=26, DEC=27, OR=28, AND=29, EQUAL=30, 
		NOTEQUAL=31, GT=32, GE=33, LT=34, LE=35, ADD=36, SUB=37, MUL=38, DIV=39, 
		MOD=40, ADDARRAY=41, DELARRAY=42, LENARRAY=43, DOUBLECONST=44, INTCONST=45, 
		ID=46, STRINGCONST=47, CHARCONST=48, BOOLEANCONST=49;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "BLOCKCOMMENT", "WS", "CLASS", "USING", "VOID", "IF", "ELSE", 
		"FOR", "WHILE", "BREAK", "RETURN", "READ", "WRITE", "NEW", "LBRACE", "RBRACE", 
		"LPARENT", "RPARENT", "LBRACK", "RBRACK", "SEMICOLON", "COMMA", "DOT", 
		"ASSIGN", "INC", "DEC", "OR", "AND", "EQUAL", "NOTEQUAL", "GT", "GE", 
		"LT", "LE", "ADD", "SUB", "MUL", "DIV", "MOD", "ADDARRAY", "DELARRAY", 
		"LENARRAY", "DIGIT", "LETTER", "EXPRESION", "LCOMMENT", "RCOMMENT", "DOUBLECONST", 
		"INTCONST", "ID", "STRINGCONST", "CHARCONST", "BOOLEANCONST"
	};


	    public override void NotifyListeners(LexerNoViableAltException e) {
	        this.ErrorListenerDispatch.SyntaxError(this.ErrorOutput, (IRecognizer) this, 0, TokenStartLine, 
	        this.TokenStartColumn,"token invalido: '" + 
	        this.GetErrorDisplay(this.EmitEOF().InputStream.GetText(Interval.Of(this.TokenStartCharIndex,this.InputStream.Index)))  
	        + "'", (RecognitionException) e);
	    }
	 

	public MiniCSharpScanner(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCSharpScanner(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, null, "'class'", "'using'", "'void'", "'if'", "'else'", 
		"'for'", "'while'", "'break'", "'return'", "'read'", "'write'", "'new'", 
		"'{'", "'}'", "'('", "')'", "'['", "']'", "';'", "','", "'.'", "'='", 
		"'++'", "'--'", "'||'", "'&&'", "'=='", "'!='", "'>'", "'>='", "'<'", 
		"'<='", "'+'", "'-'", "'*'", "'/'", "'%'", "'add'", "'del'", "'len'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "BLOCKCOMMENT", "WS", "CLASS", "USING", "VOID", "IF", 
		"ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", "WRITE", "NEW", "LBRACE", 
		"RBRACE", "LPARENT", "RPARENT", "LBRACK", "RBRACK", "SEMICOLON", "COMMA", 
		"DOT", "ASSIGN", "INC", "DEC", "OR", "AND", "EQUAL", "NOTEQUAL", "GT", 
		"GE", "LT", "LE", "ADD", "SUB", "MUL", "DIV", "MOD", "ADDARRAY", "DELARRAY", 
		"LENARRAY", "DOUBLECONST", "INTCONST", "ID", "STRINGCONST", "CHARCONST", 
		"BOOLEANCONST"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpScanner.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpScanner() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,49,345,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,5,0,114,8,
		0,10,0,12,0,117,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,128,8,1,10,
		1,12,1,131,9,1,1,1,1,1,1,1,1,1,1,1,1,2,4,2,139,8,2,11,2,12,2,140,1,2,1,
		2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,
		1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,12,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
		1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,
		1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,
		1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,
		1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
		1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,
		1,43,1,43,1,44,3,44,281,8,44,1,45,4,45,284,8,45,11,45,12,45,285,1,46,1,
		46,1,46,1,47,1,47,1,47,1,48,4,48,295,8,48,11,48,12,48,296,1,48,1,48,1,
		48,5,48,302,8,48,10,48,12,48,305,9,48,1,49,1,49,5,49,309,8,49,10,49,12,
		49,312,9,49,1,50,1,50,1,50,5,50,317,8,50,10,50,12,50,320,9,50,1,51,1,51,
		5,51,324,8,51,10,51,12,51,327,9,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,
		1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,3,53,344,8,53,1,325,0,54,1,1,3,
		2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
		55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,
		79,40,81,41,83,42,85,43,87,0,89,0,91,0,93,0,95,0,97,44,99,45,101,46,103,
		47,105,48,107,49,1,0,7,2,0,10,10,13,13,2,0,42,42,47,47,1,0,42,42,3,0,9,
		10,13,13,32,32,1,0,48,57,2,0,65,90,97,122,4,0,10,10,39,39,92,92,114,114,
		352,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
		0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
		0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,
		1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,97,1,0,0,
		0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,
		1,109,1,0,0,0,3,120,1,0,0,0,5,138,1,0,0,0,7,144,1,0,0,0,9,150,1,0,0,0,
		11,156,1,0,0,0,13,161,1,0,0,0,15,164,1,0,0,0,17,169,1,0,0,0,19,173,1,0,
		0,0,21,179,1,0,0,0,23,185,1,0,0,0,25,192,1,0,0,0,27,197,1,0,0,0,29,203,
		1,0,0,0,31,207,1,0,0,0,33,209,1,0,0,0,35,211,1,0,0,0,37,213,1,0,0,0,39,
		215,1,0,0,0,41,217,1,0,0,0,43,219,1,0,0,0,45,221,1,0,0,0,47,223,1,0,0,
		0,49,225,1,0,0,0,51,227,1,0,0,0,53,230,1,0,0,0,55,233,1,0,0,0,57,236,1,
		0,0,0,59,239,1,0,0,0,61,242,1,0,0,0,63,245,1,0,0,0,65,247,1,0,0,0,67,250,
		1,0,0,0,69,252,1,0,0,0,71,255,1,0,0,0,73,257,1,0,0,0,75,259,1,0,0,0,77,
		261,1,0,0,0,79,263,1,0,0,0,81,265,1,0,0,0,83,269,1,0,0,0,85,273,1,0,0,
		0,87,277,1,0,0,0,89,280,1,0,0,0,91,283,1,0,0,0,93,287,1,0,0,0,95,290,1,
		0,0,0,97,294,1,0,0,0,99,306,1,0,0,0,101,313,1,0,0,0,103,321,1,0,0,0,105,
		330,1,0,0,0,107,343,1,0,0,0,109,110,5,47,0,0,110,111,5,47,0,0,111,115,
		1,0,0,0,112,114,8,0,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,0,
		0,115,116,1,0,0,0,116,118,1,0,0,0,117,115,1,0,0,0,118,119,6,0,0,0,119,
		2,1,0,0,0,120,121,5,47,0,0,121,122,5,42,0,0,122,129,1,0,0,0,123,128,3,
		3,1,0,124,128,8,1,0,0,125,126,5,47,0,0,126,128,8,2,0,0,127,123,1,0,0,0,
		127,124,1,0,0,0,127,125,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,
		1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,132,133,5,42,0,0,133,134,5,47,
		0,0,134,135,1,0,0,0,135,136,6,1,0,0,136,4,1,0,0,0,137,139,7,3,0,0,138,
		137,1,0,0,0,139,140,1,0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,142,1,
		0,0,0,142,143,6,2,0,0,143,6,1,0,0,0,144,145,5,99,0,0,145,146,5,108,0,0,
		146,147,5,97,0,0,147,148,5,115,0,0,148,149,5,115,0,0,149,8,1,0,0,0,150,
		151,5,117,0,0,151,152,5,115,0,0,152,153,5,105,0,0,153,154,5,110,0,0,154,
		155,5,103,0,0,155,10,1,0,0,0,156,157,5,118,0,0,157,158,5,111,0,0,158,159,
		5,105,0,0,159,160,5,100,0,0,160,12,1,0,0,0,161,162,5,105,0,0,162,163,5,
		102,0,0,163,14,1,0,0,0,164,165,5,101,0,0,165,166,5,108,0,0,166,167,5,115,
		0,0,167,168,5,101,0,0,168,16,1,0,0,0,169,170,5,102,0,0,170,171,5,111,0,
		0,171,172,5,114,0,0,172,18,1,0,0,0,173,174,5,119,0,0,174,175,5,104,0,0,
		175,176,5,105,0,0,176,177,5,108,0,0,177,178,5,101,0,0,178,20,1,0,0,0,179,
		180,5,98,0,0,180,181,5,114,0,0,181,182,5,101,0,0,182,183,5,97,0,0,183,
		184,5,107,0,0,184,22,1,0,0,0,185,186,5,114,0,0,186,187,5,101,0,0,187,188,
		5,116,0,0,188,189,5,117,0,0,189,190,5,114,0,0,190,191,5,110,0,0,191,24,
		1,0,0,0,192,193,5,114,0,0,193,194,5,101,0,0,194,195,5,97,0,0,195,196,5,
		100,0,0,196,26,1,0,0,0,197,198,5,119,0,0,198,199,5,114,0,0,199,200,5,105,
		0,0,200,201,5,116,0,0,201,202,5,101,0,0,202,28,1,0,0,0,203,204,5,110,0,
		0,204,205,5,101,0,0,205,206,5,119,0,0,206,30,1,0,0,0,207,208,5,123,0,0,
		208,32,1,0,0,0,209,210,5,125,0,0,210,34,1,0,0,0,211,212,5,40,0,0,212,36,
		1,0,0,0,213,214,5,41,0,0,214,38,1,0,0,0,215,216,5,91,0,0,216,40,1,0,0,
		0,217,218,5,93,0,0,218,42,1,0,0,0,219,220,5,59,0,0,220,44,1,0,0,0,221,
		222,5,44,0,0,222,46,1,0,0,0,223,224,5,46,0,0,224,48,1,0,0,0,225,226,5,
		61,0,0,226,50,1,0,0,0,227,228,5,43,0,0,228,229,5,43,0,0,229,52,1,0,0,0,
		230,231,5,45,0,0,231,232,5,45,0,0,232,54,1,0,0,0,233,234,5,124,0,0,234,
		235,5,124,0,0,235,56,1,0,0,0,236,237,5,38,0,0,237,238,5,38,0,0,238,58,
		1,0,0,0,239,240,5,61,0,0,240,241,5,61,0,0,241,60,1,0,0,0,242,243,5,33,
		0,0,243,244,5,61,0,0,244,62,1,0,0,0,245,246,5,62,0,0,246,64,1,0,0,0,247,
		248,5,62,0,0,248,249,5,61,0,0,249,66,1,0,0,0,250,251,5,60,0,0,251,68,1,
		0,0,0,252,253,5,60,0,0,253,254,5,61,0,0,254,70,1,0,0,0,255,256,5,43,0,
		0,256,72,1,0,0,0,257,258,5,45,0,0,258,74,1,0,0,0,259,260,5,42,0,0,260,
		76,1,0,0,0,261,262,5,47,0,0,262,78,1,0,0,0,263,264,5,37,0,0,264,80,1,0,
		0,0,265,266,5,97,0,0,266,267,5,100,0,0,267,268,5,100,0,0,268,82,1,0,0,
		0,269,270,5,100,0,0,270,271,5,101,0,0,271,272,5,108,0,0,272,84,1,0,0,0,
		273,274,5,108,0,0,274,275,5,101,0,0,275,276,5,110,0,0,276,86,1,0,0,0,277,
		278,7,4,0,0,278,88,1,0,0,0,279,281,7,5,0,0,280,279,1,0,0,0,281,90,1,0,
		0,0,282,284,3,89,44,0,283,282,1,0,0,0,284,285,1,0,0,0,285,283,1,0,0,0,
		285,286,1,0,0,0,286,92,1,0,0,0,287,288,5,47,0,0,288,289,5,42,0,0,289,94,
		1,0,0,0,290,291,5,42,0,0,291,292,5,47,0,0,292,96,1,0,0,0,293,295,3,87,
		43,0,294,293,1,0,0,0,295,296,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,
		298,1,0,0,0,298,299,5,46,0,0,299,303,3,87,43,0,300,302,3,87,43,0,301,300,
		1,0,0,0,302,305,1,0,0,0,303,301,1,0,0,0,303,304,1,0,0,0,304,98,1,0,0,0,
		305,303,1,0,0,0,306,310,3,87,43,0,307,309,3,87,43,0,308,307,1,0,0,0,309,
		312,1,0,0,0,310,308,1,0,0,0,310,311,1,0,0,0,311,100,1,0,0,0,312,310,1,
		0,0,0,313,318,3,89,44,0,314,317,3,89,44,0,315,317,3,87,43,0,316,314,1,
		0,0,0,316,315,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,318,319,1,0,0,0,
		319,102,1,0,0,0,320,318,1,0,0,0,321,325,5,34,0,0,322,324,9,0,0,0,323,322,
		1,0,0,0,324,327,1,0,0,0,325,326,1,0,0,0,325,323,1,0,0,0,326,328,1,0,0,
		0,327,325,1,0,0,0,328,329,5,34,0,0,329,104,1,0,0,0,330,331,5,39,0,0,331,
		332,8,6,0,0,332,333,5,39,0,0,333,106,1,0,0,0,334,335,5,116,0,0,335,336,
		5,114,0,0,336,337,5,117,0,0,337,344,5,101,0,0,338,339,5,102,0,0,339,340,
		5,97,0,0,340,341,5,108,0,0,341,342,5,115,0,0,342,344,5,101,0,0,343,334,
		1,0,0,0,343,338,1,0,0,0,344,108,1,0,0,0,14,0,115,127,129,140,280,285,296,
		303,310,316,318,325,343,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SyntacticAnalysisGenerated
