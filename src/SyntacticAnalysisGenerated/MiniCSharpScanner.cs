//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/Admin/Desktop/Compi/CompilatorProject\MiniCSharpScanner.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace SyntacticAnalysisGenerated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MiniCSharpScanner : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COMMENT=1, WS=2, TYPECHAR=3, TYPEINT=4, TYPEDOUBLE=5, TYPEBOOL=6, TYPESTRING=7, 
		ARRADD=8, ARRDEL=9, ARRLEN=10, CLASS=11, USING=12, VOID=13, IF=14, ELSE=15, 
		FOR=16, WHILE=17, BREAK=18, RETURN=19, READ=20, WRITE=21, NEW=22, LBRACE=23, 
		RBRACE=24, LPARENT=25, RPARENT=26, LBRACK=27, RBRACK=28, SEMICOLON=29, 
		COMMA=30, DOT=31, ASSIGN=32, INC=33, DEC=34, OR=35, AND=36, EQUAL=37, 
		NOTEQUAL=38, GT=39, GE=40, LT=41, LE=42, ADD=43, SUB=44, MUL=45, DIV=46, 
		MOD=47, NUM=48, ID=49, PLAINTEXT=50, CHAR=51, BOOLEAN=52, DOUBLE=53;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"COMMENT", "WS", "TYPECHAR", "TYPEINT", "TYPEDOUBLE", "TYPEBOOL", "TYPESTRING", 
		"ARRADD", "ARRDEL", "ARRLEN", "CLASS", "USING", "VOID", "IF", "ELSE", 
		"FOR", "WHILE", "BREAK", "RETURN", "READ", "WRITE", "NEW", "LBRACE", "RBRACE", 
		"LPARENT", "RPARENT", "LBRACK", "RBRACK", "SEMICOLON", "COMMA", "DOT", 
		"ASSIGN", "INC", "DEC", "OR", "AND", "EQUAL", "NOTEQUAL", "GT", "GE", 
		"LT", "LE", "ADD", "SUB", "MUL", "DIV", "MOD", "DIGIT", "LETTER", "EXPRESION", 
		"NUM", "ID", "PLAINTEXT", "CHAR", "BOOLEAN", "DOUBLE"
	};


	public MiniCSharpScanner(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MiniCSharpScanner(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, null, null, "'char'", "'int'", "'double'", "'bool'", "'string'", 
		"'add'", "'del'", "'len'", "'class'", "'using'", "'void'", "'if'", "'else'", 
		"'for'", "'while'", "'break'", "'return'", "'read'", "'write'", "'new'", 
		"'{'", "'}'", "'('", "')'", "'['", "']'", "';'", "','", "'.'", "'='", 
		"'++'", "'--'", "'||'", "'&&'", "'=='", "'!='", "'>'", "'>='", "'<'", 
		"'<='", "'+'", "'-'", "'*'", "'/'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COMMENT", "WS", "TYPECHAR", "TYPEINT", "TYPEDOUBLE", "TYPEBOOL", 
		"TYPESTRING", "ARRADD", "ARRDEL", "ARRLEN", "CLASS", "USING", "VOID", 
		"IF", "ELSE", "FOR", "WHILE", "BREAK", "RETURN", "READ", "WRITE", "NEW", 
		"LBRACE", "RBRACE", "LPARENT", "RPARENT", "LBRACK", "RBRACK", "SEMICOLON", 
		"COMMA", "DOT", "ASSIGN", "INC", "DEC", "OR", "AND", "EQUAL", "NOTEQUAL", 
		"GT", "GE", "LT", "LE", "ADD", "SUB", "MUL", "DIV", "MOD", "NUM", "ID", 
		"PLAINTEXT", "CHAR", "BOOLEAN", "DOUBLE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MiniCSharpScanner.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MiniCSharpScanner() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,53,353,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
		7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
		7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,
		0,1,0,1,0,5,0,118,8,0,10,0,12,0,121,9,0,1,0,1,0,1,1,4,1,126,8,1,11,1,12,
		1,127,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,
		1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
		7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,
		11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
		14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,
		17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,
		19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,
		22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,
		29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,
		34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,
		39,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,
		46,1,46,1,47,1,47,1,48,3,48,296,8,48,1,49,4,49,299,8,49,11,49,12,49,300,
		1,50,4,50,304,8,50,11,50,12,50,305,1,51,1,51,1,51,5,51,311,8,51,10,51,
		12,51,314,9,51,1,52,1,52,1,52,1,52,5,52,320,8,52,10,52,12,52,323,9,52,
		1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
		1,54,3,54,340,8,54,1,55,4,55,343,8,55,11,55,12,55,344,1,55,1,55,5,55,349,
		8,55,10,55,12,55,352,9,55,0,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
		21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
		33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,
		45,91,46,93,47,95,0,97,0,99,0,101,48,103,49,105,50,107,51,109,52,111,53,
		1,0,5,2,0,10,10,13,13,3,0,9,10,13,13,32,32,1,0,48,57,2,0,65,90,97,122,
		4,0,10,10,39,39,92,92,114,114,361,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,
		0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
		0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
		0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,
		1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
		0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,
		1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
		0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,
		1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,
		0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,
		0,0,111,1,0,0,0,1,113,1,0,0,0,3,125,1,0,0,0,5,131,1,0,0,0,7,136,1,0,0,
		0,9,140,1,0,0,0,11,147,1,0,0,0,13,152,1,0,0,0,15,159,1,0,0,0,17,163,1,
		0,0,0,19,167,1,0,0,0,21,171,1,0,0,0,23,177,1,0,0,0,25,183,1,0,0,0,27,188,
		1,0,0,0,29,191,1,0,0,0,31,196,1,0,0,0,33,200,1,0,0,0,35,206,1,0,0,0,37,
		212,1,0,0,0,39,219,1,0,0,0,41,224,1,0,0,0,43,230,1,0,0,0,45,234,1,0,0,
		0,47,236,1,0,0,0,49,238,1,0,0,0,51,240,1,0,0,0,53,242,1,0,0,0,55,244,1,
		0,0,0,57,246,1,0,0,0,59,248,1,0,0,0,61,250,1,0,0,0,63,252,1,0,0,0,65,254,
		1,0,0,0,67,257,1,0,0,0,69,260,1,0,0,0,71,263,1,0,0,0,73,266,1,0,0,0,75,
		269,1,0,0,0,77,272,1,0,0,0,79,274,1,0,0,0,81,277,1,0,0,0,83,279,1,0,0,
		0,85,282,1,0,0,0,87,284,1,0,0,0,89,286,1,0,0,0,91,288,1,0,0,0,93,290,1,
		0,0,0,95,292,1,0,0,0,97,295,1,0,0,0,99,298,1,0,0,0,101,303,1,0,0,0,103,
		307,1,0,0,0,105,315,1,0,0,0,107,326,1,0,0,0,109,339,1,0,0,0,111,342,1,
		0,0,0,113,114,5,47,0,0,114,115,5,47,0,0,115,119,1,0,0,0,116,118,8,0,0,
		0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,
		122,1,0,0,0,121,119,1,0,0,0,122,123,6,0,0,0,123,2,1,0,0,0,124,126,7,1,
		0,0,125,124,1,0,0,0,126,127,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,
		129,1,0,0,0,129,130,6,1,0,0,130,4,1,0,0,0,131,132,5,99,0,0,132,133,5,104,
		0,0,133,134,5,97,0,0,134,135,5,114,0,0,135,6,1,0,0,0,136,137,5,105,0,0,
		137,138,5,110,0,0,138,139,5,116,0,0,139,8,1,0,0,0,140,141,5,100,0,0,141,
		142,5,111,0,0,142,143,5,117,0,0,143,144,5,98,0,0,144,145,5,108,0,0,145,
		146,5,101,0,0,146,10,1,0,0,0,147,148,5,98,0,0,148,149,5,111,0,0,149,150,
		5,111,0,0,150,151,5,108,0,0,151,12,1,0,0,0,152,153,5,115,0,0,153,154,5,
		116,0,0,154,155,5,114,0,0,155,156,5,105,0,0,156,157,5,110,0,0,157,158,
		5,103,0,0,158,14,1,0,0,0,159,160,5,97,0,0,160,161,5,100,0,0,161,162,5,
		100,0,0,162,16,1,0,0,0,163,164,5,100,0,0,164,165,5,101,0,0,165,166,5,108,
		0,0,166,18,1,0,0,0,167,168,5,108,0,0,168,169,5,101,0,0,169,170,5,110,0,
		0,170,20,1,0,0,0,171,172,5,99,0,0,172,173,5,108,0,0,173,174,5,97,0,0,174,
		175,5,115,0,0,175,176,5,115,0,0,176,22,1,0,0,0,177,178,5,117,0,0,178,179,
		5,115,0,0,179,180,5,105,0,0,180,181,5,110,0,0,181,182,5,103,0,0,182,24,
		1,0,0,0,183,184,5,118,0,0,184,185,5,111,0,0,185,186,5,105,0,0,186,187,
		5,100,0,0,187,26,1,0,0,0,188,189,5,105,0,0,189,190,5,102,0,0,190,28,1,
		0,0,0,191,192,5,101,0,0,192,193,5,108,0,0,193,194,5,115,0,0,194,195,5,
		101,0,0,195,30,1,0,0,0,196,197,5,102,0,0,197,198,5,111,0,0,198,199,5,114,
		0,0,199,32,1,0,0,0,200,201,5,119,0,0,201,202,5,104,0,0,202,203,5,105,0,
		0,203,204,5,108,0,0,204,205,5,101,0,0,205,34,1,0,0,0,206,207,5,98,0,0,
		207,208,5,114,0,0,208,209,5,101,0,0,209,210,5,97,0,0,210,211,5,107,0,0,
		211,36,1,0,0,0,212,213,5,114,0,0,213,214,5,101,0,0,214,215,5,116,0,0,215,
		216,5,117,0,0,216,217,5,114,0,0,217,218,5,110,0,0,218,38,1,0,0,0,219,220,
		5,114,0,0,220,221,5,101,0,0,221,222,5,97,0,0,222,223,5,100,0,0,223,40,
		1,0,0,0,224,225,5,119,0,0,225,226,5,114,0,0,226,227,5,105,0,0,227,228,
		5,116,0,0,228,229,5,101,0,0,229,42,1,0,0,0,230,231,5,110,0,0,231,232,5,
		101,0,0,232,233,5,119,0,0,233,44,1,0,0,0,234,235,5,123,0,0,235,46,1,0,
		0,0,236,237,5,125,0,0,237,48,1,0,0,0,238,239,5,40,0,0,239,50,1,0,0,0,240,
		241,5,41,0,0,241,52,1,0,0,0,242,243,5,91,0,0,243,54,1,0,0,0,244,245,5,
		93,0,0,245,56,1,0,0,0,246,247,5,59,0,0,247,58,1,0,0,0,248,249,5,44,0,0,
		249,60,1,0,0,0,250,251,5,46,0,0,251,62,1,0,0,0,252,253,5,61,0,0,253,64,
		1,0,0,0,254,255,5,43,0,0,255,256,5,43,0,0,256,66,1,0,0,0,257,258,5,45,
		0,0,258,259,5,45,0,0,259,68,1,0,0,0,260,261,5,124,0,0,261,262,5,124,0,
		0,262,70,1,0,0,0,263,264,5,38,0,0,264,265,5,38,0,0,265,72,1,0,0,0,266,
		267,5,61,0,0,267,268,5,61,0,0,268,74,1,0,0,0,269,270,5,33,0,0,270,271,
		5,61,0,0,271,76,1,0,0,0,272,273,5,62,0,0,273,78,1,0,0,0,274,275,5,62,0,
		0,275,276,5,61,0,0,276,80,1,0,0,0,277,278,5,60,0,0,278,82,1,0,0,0,279,
		280,5,60,0,0,280,281,5,61,0,0,281,84,1,0,0,0,282,283,5,43,0,0,283,86,1,
		0,0,0,284,285,5,45,0,0,285,88,1,0,0,0,286,287,5,42,0,0,287,90,1,0,0,0,
		288,289,5,47,0,0,289,92,1,0,0,0,290,291,5,37,0,0,291,94,1,0,0,0,292,293,
		7,2,0,0,293,96,1,0,0,0,294,296,7,3,0,0,295,294,1,0,0,0,296,98,1,0,0,0,
		297,299,3,97,48,0,298,297,1,0,0,0,299,300,1,0,0,0,300,298,1,0,0,0,300,
		301,1,0,0,0,301,100,1,0,0,0,302,304,3,95,47,0,303,302,1,0,0,0,304,305,
		1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,102,1,0,0,0,307,312,3,97,48,
		0,308,311,3,97,48,0,309,311,3,95,47,0,310,308,1,0,0,0,310,309,1,0,0,0,
		311,314,1,0,0,0,312,310,1,0,0,0,312,313,1,0,0,0,313,104,1,0,0,0,314,312,
		1,0,0,0,315,321,5,34,0,0,316,320,3,97,48,0,317,320,3,95,47,0,318,320,3,
		3,1,0,319,316,1,0,0,0,319,317,1,0,0,0,319,318,1,0,0,0,320,323,1,0,0,0,
		321,319,1,0,0,0,321,322,1,0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,324,325,
		5,34,0,0,325,106,1,0,0,0,326,327,5,34,0,0,327,328,8,4,0,0,328,329,5,34,
		0,0,329,108,1,0,0,0,330,331,5,116,0,0,331,332,5,114,0,0,332,333,5,117,
		0,0,333,340,5,101,0,0,334,335,5,102,0,0,335,336,5,97,0,0,336,337,5,108,
		0,0,337,338,5,115,0,0,338,340,5,101,0,0,339,330,1,0,0,0,339,334,1,0,0,
		0,340,110,1,0,0,0,341,343,3,95,47,0,342,341,1,0,0,0,343,344,1,0,0,0,344,
		342,1,0,0,0,344,345,1,0,0,0,345,346,1,0,0,0,346,350,5,46,0,0,347,349,3,
		95,47,0,348,347,1,0,0,0,349,352,1,0,0,0,350,348,1,0,0,0,350,351,1,0,0,
		0,351,112,1,0,0,0,352,350,1,0,0,0,13,0,119,127,295,300,305,310,312,319,
		321,339,344,350,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace SyntacticAnalysisGenerated
